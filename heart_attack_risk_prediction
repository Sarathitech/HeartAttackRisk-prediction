{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from operator import add\n",
        "import seaborn as sns\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cj9t8bNpyXoP"
      },
      "outputs": [],
      "source": [
        "#load the data\n",
        "data = pd.read_csv('data/framingham.csv')\n",
        "data.drop(['education'],axis=1,inplace=True)\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MS0jsfboD-gu",
        "outputId": "df12fca0-00af-45ff-82e9-6a6bfb886a38"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The total percentage of missing data is 12.74%\n"
          ]
        }
      ],
      "source": [
        "#total percentage of missing data\n",
        "missing_data = data.isnull().sum()\n",
        "total_percentage = (missing_data.sum()/data.shape[0]) * 100\n",
        "print(f'The total percentage of missing data is {round(total_percentage,2)}%')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "yJcDixzEEQRI",
        "outputId": "a4eb2f37-76f6-472f-b5a8-2178983abc4f"
      },
      "outputs": [],
      "source": [
        "# percentage of missing data per category\n",
        "total = data.isnull().sum().sort_values(ascending=False)\n",
        "percent_total = (data.isnull().sum()/data.isnull().count()).sort_values(ascending=False)*100\n",
        "missing = pd.concat([total, percent_total], axis=1, keys=[\"Total\", \"Percentage\"])\n",
        "missing_data = missing[missing['Total']>0]\n",
        "missing_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "id": "LlUFXnwUFGK5",
        "outputId": "3a9dc8d5-e48c-4e96-dbc3-39aae3fb3664"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(9,6))\n",
        "sns.set(style=\"whitegrid\")\n",
        "sns.barplot(x=missing_data.index, y=missing_data['Percentage'], data = missing_data)\n",
        "plt.title('Percentage of missing data by feature')\n",
        "plt.xlabel('Features', fontsize=14)\n",
        "plt.ylabel('Percentage', fontsize=14)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ia6zZNOBFS8v",
        "outputId": "4fc832c4-fb7b-46b2-c145-532f8822140e"
      },
      "outputs": [],
      "source": [
        "data.dropna(axis=0, inplace=True)\n",
        "data.shape\n",
        "data.head"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "zfldWfkzNzyr",
        "outputId": "310832af-fa47-4a82-d581-f9a661bcdf53"
      },
      "outputs": [],
      "source": [
        "# plot histogram to see the distribution of the data\n",
        "fig = plt.figure(figsize = (15,20))\n",
        "ax = fig.gca()\n",
        "data.hist(ax = ax)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "wzGj9ICrN8nh",
        "outputId": "dc37f4cf-e89e-41c8-b0d2-64a168c60d7a"
      },
      "outputs": [],
      "source": [
        "sns.countplot(x='TenYearCHD',data=data)\n",
        "plt.show()\n",
        "cases = data.TenYearCHD.value_counts()\n",
        "print(f\"There are {cases[0]} patients without heart disease and {cases[1]} patients with the disease\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "N53zm2dCOAog",
        "outputId": "76d2a47d-399a-4904-c49c-2ea82a7f9181"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(15,6))\n",
        "sns.countplot(x='age',data = data, hue = 'TenYearCHD',palette='husl')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 568
        },
        "id": "atIE7jvFOQou",
        "outputId": "12a1ba55-e216-434d-8232-be908fbcd6b3"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(15,8))\n",
        "sns.heatmap(data.corr(), annot = True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SShashwNGLGv",
        "outputId": "af63fe26-8adb-409f-dbf6-39a42340f492"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from boruta import BorutaPy\n",
        "#define the features\n",
        "x = data.iloc[:,:-1].values\n",
        "y = data.iloc[:,-1].values\n",
        "\n",
        "forest = RandomForestClassifier(n_estimators=1000, n_jobs=-1, class_weight='balanced')\n",
        "\n",
        "# define Boruta feature selection method\n",
        "feat_selector = BorutaPy(forest, n_estimators='auto', verbose=2)\n",
        " \n",
        "# find all relevant features\n",
        "feat_selector.fit(x, y)\n",
        "# show the most important features\n",
        "most_important = data.columns[:-1][feat_selector.support_].tolist()\n",
        "most_important"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zdjflI0uJvTy",
        "outputId": "a3c2b6e4-b7b3-4f4d-a939-98d9c102c9b0"
      },
      "outputs": [],
      "source": [
        "# select the top features\n",
        "top_features = data.columns[:-1][feat_selector.ranking_ <=6].tolist()\n",
        "top_features"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "5pW9S0nHOcdf",
        "outputId": "10ea2e51-1a90-4b47-b33b-22a930812025"
      },
      "outputs": [],
      "source": [
        "import statsmodels.api as sm\n",
        "X_top = data[top_features]\n",
        "y = data['TenYearCHD']\n",
        "res = sm.Logit(y,X_top).fit()\n",
        "res.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3Ruca0JDOhwO",
        "outputId": "d2b8673c-43e9-40ea-8fc5-54c81f6cf7fc"
      },
      "outputs": [],
      "source": [
        "params = res.params\n",
        "conf = res.conf_int()\n",
        "conf['Odds Ratio'] = params\n",
        "conf.columns = ['5%', '95%', 'Odds Ratio']\n",
        "print(np.exp(conf))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "dhnJAnLhKSzq"
      },
      "outputs": [],
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.under_sampling import RandomUnderSampler\n",
        "from imblearn.pipeline import Pipeline\n",
        "from collections import Counter\n",
        "X = data[top_features]\n",
        "y = data.iloc[:,-1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IdPrvpOvKsAy",
        "outputId": "2dfb992b-31dd-4e26-c1d6-ba851f205914"
      },
      "outputs": [],
      "source": [
        "# the numbers before smote\n",
        "num_before = dict(Counter(y))\n",
        "\n",
        "#perform smoting\n",
        "\n",
        "# define pipeline\n",
        "over = SMOTE(sampling_strategy=0.8)\n",
        "under = RandomUnderSampler(sampling_strategy=0.8)\n",
        "steps = [('o', over), ('u', under)]\n",
        "pipeline = Pipeline(steps=steps)\n",
        "\n",
        "# transform the dataset\n",
        "X_smote, y_smote = pipeline.fit_resample(X, y)\n",
        "\n",
        "\n",
        "#the numbers after smote\n",
        "num_after =dict(Counter(y_smote))\n",
        "print(num_after[0], num_after[1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "id": "U3MPeaAtPDUG",
        "outputId": "0098f924-9c44-41a6-bd3b-55c025b332d4"
      },
      "outputs": [],
      "source": [
        "labels = [\"Negative Cases\",\"Positive Cases\"]\n",
        "plt.figure(figsize=(15,6))\n",
        "plt.subplot(1,2,1)\n",
        "sns.barplot(labels, list(num_before.values()))\n",
        "plt.title(\"Numbers Before Balancing\")\n",
        "plt.subplot(1,2,2)\n",
        "sns.barplot(labels, list(num_after.values()))\n",
        "plt.title(\"Numbers After Balancing\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "LWSPXhWoK2mQ",
        "outputId": "64df43a2-6aef-4106-a50d-d96355853f47"
      },
      "outputs": [],
      "source": [
        "# new dataset\n",
        "new_data = pd.concat([pd.DataFrame(X_smote), pd.DataFrame(y_smote)], axis=1)\n",
        "new_data.columns = ['age', 'totChol', 'sysBP', 'diaBP', 'BMI', 'heartRate', 'glucose','TenYearCHD']\n",
        "new_data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "4K3B47kvK97r",
        "outputId": "e4da5d66-33b4-4a2d-8baf-9a39985d49ca"
      },
      "outputs": [],
      "source": [
        "X_new = new_data[top_features]\n",
        "y_new= new_data.iloc[:,-1]\n",
        "X_new.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "y8WTaOL8LC36"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import accuracy_score\n",
        "X_train,X_test,y_train,y_test = train_test_split(X_new,y_new,test_size=.2,random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "KLTcKEmoLGtm"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_train = pd.DataFrame(X_train_scaled)\n",
        "\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "X_test = pd.DataFrame(X_test_scaled)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xiN9riMHLOFL",
        "outputId": "b22f28a7-5472-437c-d972-9e627b258d57"
      },
      "outputs": [],
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "# search for optimun parameters using gridsearch\n",
        "params= {'n_neighbors': np.arange(1, 21)}\n",
        "grid_search = GridSearchCV(estimator = KNeighborsClassifier(), param_grid = params, scoring = 'accuracy', cv = 10, n_jobs = -1)\n",
        "knn_clf = GridSearchCV(KNeighborsClassifier(),params,cv=3, n_jobs=-1)\n",
        "# train the model\n",
        "knn_clf.fit(X_train,y_train)\n",
        "knn_clf.best_params_ "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AZwkSJLjL4rR",
        "outputId": "0d667944-ff5c-41b1-ace2-65c9f589ad57"
      },
      "outputs": [],
      "source": [
        "# predictions\n",
        "knn_predict = knn_clf.predict(X_test)\n",
        "#accuracy\n",
        "knn_accuracy = accuracy_score(y_test,knn_predict)\n",
        "print(f\"Using k-nearest neighbours we get an accuracy of {round(knn_accuracy*100,2)}%\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "mz6-iAmxPT4v",
        "outputId": "3c6fc564-e86f-463d-8e39-a3c97d21cff7"
      },
      "outputs": [],
      "source": [
        "cm=confusion_matrix(y_test,knn_predict)\n",
        "conf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n",
        "plt.figure(figsize = (8,5))\n",
        "sns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nFjGznLkeeoG",
        "outputId": "c6433ab1-b2c0-4f19-a3a9-14470973b1e5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "You are safe. 😊 \n"
          ]
        }
      ],
      "source": [
        "# age\ttotChol\tsysBP\tdiaBP\tBMI\theartRate\tglucose\n",
        "h = [[39, 195, 106 ,70 , 26.97, 80, 77]]\n",
        "prediction = knn_clf.predict(h)\n",
        "print('You are safe. 😊 ') if prediction[0] == 0 else print('Sorry, You are on risk. 👽')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "stpmqrQviStp",
        "outputId": "6be424c8-7552-429f-d4e0-e4b539b408bd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sorry, You are on risk. 👽\n"
          ]
        }
      ],
      "source": [
        "h = [[65, 150, 180, 70, 26.97, 80, 77]]\n",
        "prediction = knn_clf.predict(h)\n",
        "print('You are safe. 😊 ') if prediction[0] == 0 else print('Sorry, You are on risk. 👽')"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "heart attack",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3.10.5 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.5"
    },
    "vscode": {
      "interpreter": {
        "hash": "369f2c481f4da34e4445cda3fffd2e751bd1c4d706f27375911949ba6bb62e1c"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
